def test1():
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    from matplotlib.collections import LineCollection
    from concave_hull import concave_hull, concave_hull_indexes
    from copy import deepcopy
    from scipy import interpolate

    fig, ax = plt.subplots()
    FLAG_R = 0.5
    points_copy = deepcopy(points)
    # ax.scatter(np.array(points)[:, 0], np.array(points)[:, 1])

    for point in points_copy:
        points.append((point[0], point[1] + FLAG_R))
        points.append((point[0], point[1] - FLAG_R))
        points.append((point[0] - FLAG_R, point[1]))
        points.append((point[0] + FLAG_R, point[1]))

    points = np.array(points)

    idxes = concave_hull_indexes(
        points[:, :2],
        concavity=1,
        length_threshold=0,
    )
    _idx_points = [points[idx] for idx in idxes]
    points = np.array(_idx_points)
    points = [
        [-14995221.48304, 24076552.49225],
        [-11584867.93225, 26922248.60319],
        [-4264665.60991, 31005824.36949],
        [-5265057.75699, 30794804.34061],
        [-6141037.80276, 30533795.50693],
        [-6905829.60644, 29963648.08032],
        [-7732931.21554, 29521174.55796],
        [-8682802.2326, 29684509.25019],
        [-9215236.23466, 28878188.44264],
        [-10228350.28342, 28811258.28048],
        [-10584129.6686, 27897472.68393],
        [-12080697.16004, 28058413.47821],
        [-13084069.53623, 27203521.24988],
        [-13125465.96826, 26136525.04052],
        [-14452228.03472, 26200792.48201],
        [-14085932.28037, 25162927.34214],
        [-15899568.6771, 24750677.50206],
        [-16560909.67986, 23591301.97459],
        [-16704284.66537, 22581770.96687],
        [-17369391.63896, 21638227.79453],
    ]
    points = np.array(points)
    x = points[:, 0]
    y = points[:, 1]
    ax.scatter(x, y)
    l = len(x)
    # t=np.linspace(0,1,l-2,endpoint=True)
    # t=np.append([0,0,0],t)
    # t=np.append(t,[1,1,1])
    #
    # tck=[t,[x,y],3]
    u3 = np.linspace(0, 1, 100, endpoint=True)
    # new_points = splev(u3,tck)

    tck, _ = interpolate.splprep([x, y], k=3, s=0)
    new_points = interpolate.splev(u3, tck)

    ax.plot(new_points[0], new_points[1], "r-")
    # dodawanie punktów jako linie
    points = np.array(zip(new_points[0], new_points[1]))

    # line_to_plot = [
    #     (points[idxes[j]], points[idxes[(j + 1) % len(idxes)]])
    #     for j in range(len(idxes))
    # ]
    # line_segments = LineCollection(segments=np.array(line_to_plot))
    # ax.add_collection(line_segments)
    # ax.scatter(x, y, color = "red")

    np_points = np.array(points)
    ax.set_xlim([-5, 5])
    ax.set_ylim([-5, 5])

    ax.set_title("Line collection with masked arrays")
    plt.show()


def test2():
    import numpy as np
    import matplotlib.pyplot as plt
    from scipy.spatial import ConvexHull

    # Współrzędne punktów współliniowych
    points = np.array([[1, 1], [2, 2], [3, 3], [4, 4]])

    # Obliczanie otoczki wypukłej
    hull = ConvexHull(points)

    # Rysowanie punktów
    plt.plot(points[:, 0], points[:, 1], "o")

    # Rysowanie otoczki wypukłej
    for simplex in hull.simplices:
        plt.plot(points[simplex, 0], points[simplex, 1], "k-")

    plt.xlabel("X")
    plt.ylabel("Y")
    plt.title("Otoczka wypukła punktów współliniowych")
    plt.grid(True)
    plt.show()


def test3():
    import matplotlib.pyplot as plt
    import numpy as np

    points = [
        (1834535.9406, 21498848.105679996),
        (1843893.9549413358, 22070161.228721652),
        (1920882.1165797212, 22575187.954891242),
        (2062866.603429126, 23018821.285894167),
        (2267213.5934035173, 23405954.223435823),
        (2531289.264416868, 23741479.769221645),
        (2852459.7943831435, 24030290.924957022),
        (3228091.3612163165, 24277280.69234737),
        (3655550.142830354, 24487342.073098097),
        (4132202.317139227, 24665368.06891462),
        (4655414.062056906, 24816251.68150235),
        (5222551.555497357, 24944885.91256668),
        (5830980.97537455, 25056163.763813023),
        (6478068.4423383, 25154978.170601096),
        (7160567.742336509, 25245512.623177126),
        (7873108.162554538, 25329489.187894568),
        (8609858.550104208, 25408096.469653197),
        (9364987.752097331, 25482523.073352765),
        (10132664.615645716, 25553957.60389304),
        (10907057.987861183, 25623588.66617379),
        (11682336.715855539, 25692604.86509476),
        (12452669.646740599, 25762194.80555572),
        (13212225.62762818, 25833547.09245645),
        (13955173.505630093, 25907850.330696687),
        (14675682.127858149, 25986293.125176214),
        (15367920.341424165, 26070064.080794774),
        (16026056.993439952, 26160351.802452143),
        (16644260.931017324, 26258344.895048082),
        (17216701.001268093, 26365231.96348235),
        (17737546.05130408, 26482201.61265472),
        (18200964.92823708, 26610442.447464935),
        (18601126.479178928, 26751143.072812777),
        (18932199.551241424, 26905492.093597993),
        (19188352.991536386, 27074678.11472036),
        (19363755.647175625, 27259889.741079632),
        (19452576.365270957, 27462315.57757557),
        (19448983.992934193, 27683144.229107946),
        (19347147.377277143, 27923564.300576515),
        (19141235.36541164, 28184764.39688105),
        (18825501.483436387, 28467782.25261181),
        (18407737.490548298, 28749534.89081941),
        (17924016.652887065, 28956550.922275357),
        (17413957.438711897, 29009042.5649802),
        (16912204.929648336, 28863479.594391186),
        (16429313.759449583, 28651958.750492994),
        (15968554.370831108, 28559680.82379605),
        (15530928.659545021, 28734208.432689786),
        (15100924.704713047, 29048846.42815465),
        (14655722.159353182, 29255522.95756925),
        (14178966.798372764, 29170160.76832611),
        (13687085.537963057, 28934215.4906905),
        (13206818.163357863, 28791554.625247397),
        (12764618.731186396, 28968571.494395193),
        (12382612.454076046, 29429819.196976557),
        (12079593.774599735, 29938381.438315246),
        (11874271.54772248, 30252164.957695737),
        (11775550.085777933, 30170548.892200228),
        (11732800.198538356, 29744734.130658444),
        (11673043.439438809, 29120457.05265653),
        (11523261.506469458, 28443622.622989345),
        (11215464.429624183, 27856645.374269247),
        (10767629.056623498, 27442265.707210325),
        (10269865.111254442, 27233152.763936087),
        (9814517.13450018, 27260424.381314658),
        (9483940.12875311, 27545931.138804756),
        (9275746.654871823, 28032908.37132138),
        (9144832.669676326, 28624963.380744476),
        (9045767.561840149, 29225400.51291176),
        (8933120.720036803, 29737524.113660946),
        (8761461.532939816, 30064638.528829746),
        (8491591.726623962, 30125596.91133786),
        (8129213.439997281, 29951272.642166506),
        (7699708.022546053, 29621635.970631573),
        (7228540.497284262, 29216865.899756625),
        (6741175.8872259185, 28817141.4325653),
        (6262332.7905757725, 28498381.894079532),
        (5804267.366919623, 28265386.28350177),
        (5368934.21272956, 28064164.903255578),
        (4957978.55932196, 27838962.95671726),
        (4570022.459964476, 27550454.413467765),
        (4192397.779826521, 27220667.17516955),
        (3809801.318653806, 26885948.80083978),
        (3407216.2865524516, 26582062.1149057),
        (2982290.1084167757, 26318914.71633995),
        (2550065.767271206, 26070899.48134045),
        (2126848.916699833, 25809831.421425674),
        (1727902.8954551492, 25510360.57944828),
        (1360460.5204559488, 25168979.516795088),
        (1028023.1760406479, 24792330.05874693),
        (734067.537988972, 24387104.841654044),
        (480866.29235100705, 23958436.876816746),
        (267816.86878971057, 23507734.623925142),
        (93896.57154308454, 23035862.320305318),
        (-41149.159524661896, 22544202.072437078),
        (-126687.32716456585, 22041476.266219486),
        (-144003.19658067793, 21541855.912040327),
        (-74190.73101813858, 21059640.994104203),
        (101656.10627791536, 20609131.496615704),
        (402443.35206234094, 20204627.40377944),
        (847077.04309, 19860428.6998),
    ]
    fig, ax = plt.subplots()
    ax.scatter(np.array(points)[:, 0], np.array(points)[:, 1])
    plt.show()


def test4():
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    from matplotlib.collections import LineCollection
    from concave_hull import concave_hull, concave_hull_indexes
    from copy import deepcopy
    from scipy import interpolate

    fig, ax = plt.subplots()
    points = [
            [917267.9703, 10749424.05284],
            [1253017.02647, 12493757.48147],
            [5529199.9067, 14401066.38031],
            [17988604.51273, 17653225.47228],
            [16464251.25297, 18255870.46016],
            [14964079.11059, 17821989.8218],
            [13702860.61346, 18510401.86179],
            [12106766.58273, 18065795.38647],
            [10937436.94189, 19517174.00647],
            [10494886.2281, 17421635.94807],
            [8803697.44811, 16556681.35891],
            [7800676.0135, 19348769.25657],
            [5617089.22462, 17918296.33455],
            [4049838.07198, 17095376.13737],
            [2645640.01012, 15942115.051],
            [1122195.61592, 15000457.54438],
            [-134441.04137, 13710728.17891],
            [-880281.3589, 12098725.14376],
            [-1021893.72976, 10448014.4894],
            [-70190.92721, 9111004.64696],
    ]
    points.append(points[0])
    points = np.array(points) / (10**7)
    x = points[:, 0]
    y = points[:, 1]

    ax.scatter(x, y)
    l = len(x)
    # t=np.linspace(0,1,l-2,endpoint=True)
    # t=np.append([0,0,0],t)
    # t=np.append(t,[1,1,1])
    #
    # tck=[t,[x,y],3]
    u3 = np.linspace(0, 1, 10000, endpoint=True)
    # new_points = splev(u3,tck)

    tck, _ = interpolate.splprep([x, y], k=3, s=0)
    new_points = interpolate.splev(u3, tck)

    # ax.plot(new_points[0], new_points[1], "r-")
    # dodawanie punktów jako linie
    points = np.array(list(zip(new_points[0], new_points[1])))
    line_to_plot = [
        (points[j % len(points)], points[(j + 1) % len(points)])
        for j in range(len(points))
    ]
    line_segments = LineCollection(segments=np.array(line_to_plot))
    ax.add_collection(line_segments)
    # ax.scatter(x, y, color = "red")

    np_points = np.array(points)

    ax.set_title("Line collection with masked arrays")
    plt.show()


test4()
